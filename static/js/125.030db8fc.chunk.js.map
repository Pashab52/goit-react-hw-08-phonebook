{"version":3,"file":"static/js/125.030db8fc.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/Contacts.module.css?8552","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Contacts_title__HJPSk\",\"contactsTitleWrap\":\"Contacts_contactsTitleWrap__vYTVi\",\"contactsTitle\":\"Contacts_contactsTitle__bCRKZ\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\"};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.contacts.items;\nexport const selectFilter = state => state.contacts.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterData) => {\n    const normalizedFilter = filterData.toLowerCase();\n    const filterContactsData = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n    return filterContactsData;\n  }\n);\n","import { useState } from \"react\";\nimport css from './ContactForm.module.css'\n// import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from \"redux/contacts/operations\";  \nimport { selectContacts } from \"redux/contacts/selectors\";\n// import { fetchContacts } from \"redux/operations\";\n\n\nexport function ContactForm() {\n  \n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleInputChange = event => {\n\n    switch (event.currentTarget.name) {\n\n      case 'name':\n        setName(event.currentTarget.value);\n        break;\n      \n      case 'number':\n        setNumber(event.currentTarget.value);\n        break;\n      \n      default:\n        console.warn('error');\n        }  \n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const identicalContact = contacts.some(\n      contact => contact.name === name\n    );\n\n    identicalContact\n      ? alert(`${name} is already in contacts`)\n      : onNoIdenticalContact();\n  };\n\n  function onNoIdenticalContact() {\n    \n    dispatch(addContact({ name, number }));\n \n    reset();\n  }\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n \n    return (\n      <form className={css.contactForm} onSubmit={handleFormSubmit}>\n        <label>\n          Name <br />\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            maxLength=\"30\"\n            required\n            value={name}\n            onChange={handleInputChange}\n          />\n        </label>\n\n        <label>\n          Number <br />\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            maxLength=\"20\"\n            required\n            value={number}\n            onChange={handleInputChange}\n          />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contIcon\":\"ContactItem_contIcon__sakIW\",\"contText\":\"ContactItem_contText__a3Qsu\",\"contBtn\":\"ContactItem_contBtn__R6maD\"};","import PropTypes from 'prop-types';\nimport css from './ContactItem.module.css'\nimport { useDispatch} from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations'; \nimport { BiUser, BiSolidPhone, BiX } from 'react-icons/bi';\n\n\n\nexport function ContactItem (props) {\n  const dispatch = useDispatch();\n\n  \n  \n    return (\n      <li className={css.contactItem}>\n        <div className={css.contText}>\n          <BiUser className={css.contIcon} />\n          <p>{props.name}</p>\n        </div>\n        <div className={css.contText}>\n          <BiSolidPhone className={css.contIcon} />\n          <p>{props.number}</p>\n        </div>\n        <button\n          className={css.contBtn}\n          type=\"button\"\n          data-id={props.id}\n          onClick={() => dispatch(deleteContact(props.id))}\n        >\n          <BiX size={18} />\n        </button>\n      </li>\n    );\n  }\n\n ContactItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  };","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport { useSelector } from 'react-redux';\nimport {\n  selectFilterContacts,\n} from 'redux/contacts/selectors';\n\n\nexport function ContactList() {\n\n  const filterContactsData = useSelector(selectFilterContacts);\n\n\n\n    return (\n      <ul className={CSS.contctList}>\n        {filterContactsData.map(contact => {\n               return (\n                 <ContactItem\n                   name={contact.name}\n                   number={contact.number}\n                   key={contact.id}\n                   id={contact.id}\n                   ids={contact.id}\n                 />\n               );\n          })}\n      </ul>\n    );\n  }\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","\n// import PropTypes from 'prop-types';\nimport css from './Filter.module.css';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/contactsSlice';\nimport { useSelector, useDispatch} from 'react-redux';\n\n  \nexport function Filter() {\nconst filterData = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  function handleFilterChange(event) {\n    dispatch(setFilter(event.currentTarget.value))\n  }\n \n    return (\n      <div className={css.filter}>\n        <label>\n          Find contacts by name <br />\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={filterData}\n            onChange={handleFilterChange}\n          />\n        </label>\n      </div>\n    );\n}\n  \n\n\n","import { Helmet } from 'react-helmet';\nimport css from './Contacts.module.css'\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n\n    dispatch(fetchContacts());\n\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n\n      <div className={css.contactsTitleWrap}>\n        <h2 className={css.contactsTitle}>Contacts</h2>\n        {isLoading && <Loader />}\n      </div>\n      {error && <p>Contacts not found</p>}\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilterContacts","createSelector","filterData","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","event","currentTarget","value","console","warn","reset","className","css","onSubmit","preventDefault","some","alert","addContact","type","pattern","title","maxLength","required","onChange","ContactItem","props","id","onClick","deleteContact","size","ContactList","filterContactsData","CSS","contctList","map","ids","Filter","setFilter","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}